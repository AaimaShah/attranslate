import { CliArgs, CoreResults, TSet } from "./core-definitions";
import { existsSync } from "fs";
import { checkDir, getDebugPath, writeJsonFile } from "../util/util";
import path from "path";
import { parseTCache } from "./cache-parsing";

export interface TCache {
  "generated-by-attranslate"?: string;
  source?: string;
  version: { major: number; minor: number };
  entries: Record<string, TCacheEntry>;
}

export interface TCacheEntry {
  value: string | null;
  targets: TCacheTarget[];
}

type TCacheTargetState = "needs_update" | "frozen";

export interface TCacheTarget {
  id: string;
  state: TCacheTargetState;
}

let lastReadCache: TCache | null = null;

function resolveCachePath(args: CliArgs): string {
  const cacheDir = args.cacheDir;
  checkDir(cacheDir);
  const baseName = path.basename(args.srcFile);
  const cacheName = `attranslate-cache-${args.srcLng}_${baseName}.json`;
  return path.resolve(cacheDir, cacheName);
}

function getCacheWarning(args: CliArgs): string {
  return `Do not edit this file manually! You may want to edit '${args.srcFile}' instead.`;
}

export function resolveTCache(src: TSet, args: CliArgs): TSet | null {
  const cachePath = resolveCachePath(args);
  if (!existsSync(cachePath)) {
    return null;
  }
  const tCache: TCache = parseTCache({ cachePath });
  lastReadCache = tCache;
  const internalCache: TSet = new Map();
  Object.keys(tCache.entries).forEach((key: string) => {
    const entry = tCache.entries[key];
    const internalEntry = convertTCacheEntryToInternalEntry(
      key,
      entry,
      src,
      args
    );
    internalCache.set(key, internalEntry);
  });
  return internalCache;
}

export function writeTCache(results: CoreResults, args: CliArgs) {
  const cachePath = resolveCachePath(args);
  console.info(`Write cache ${getDebugPath(cachePath)}`);

  const cache: TCache = {
    "generated-by-attranslate": getCacheWarning(args),
    source: args.srcFile,
    version: { major: 1, minor: 0 },
    entries: {},
  };
  results.newSrcCache.forEach((value, key) => {
    cache.entries[key] = convertInternalEntryToTCacheEntry(key, value, args);
  });

  writeJsonFile(cachePath, cache);
}

function getTargetId(args: CliArgs) {
  return args.targetLng;
}

function convertTCacheEntryToInternalEntry(
  key: string,
  entry: TCacheEntry,
  src: TSet,
  args: CliArgs
): string | null {
  if (src.get(key) !== entry.value) {
    return entry.value;
  }
  const targetId = getTargetId(args);
  const target = entry.targets.find((target) => target.id === targetId);
  if (!target) {
    return entry.value;
  }
  if (target.state !== "needs_update") {
    return entry.value;
  } else {
    return null;
  }
}

function convertInternalEntryToTCacheEntry(
  key: string,
  internalEntry: string | null,
  args: CliArgs
): TCacheEntry {
  const oldEntry: TCacheEntry | undefined = lastReadCache?.entries[key];
  const newState: TCacheTargetState =
    internalEntry !== null ? "frozen" : "needs_update";
  const targetId = getTargetId(args);
  const newTarget: TCacheTarget = {
    id: targetId,
    state: newState,
  };
  const newTargets = oldEntry
    ? oldEntry.targets.map((oldTarget: TCacheTarget) => {
        if (oldTarget.id === targetId) {
          return newTarget;
        } else {
          return oldTarget;
        }
      })
    : [newTarget];
  return {
    value: internalEntry,
    targets: newTargets,
  };
}
